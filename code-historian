#!/bin/bash

# Code Historian
#
# A standalone script for analyzing code evolution in software projects.
# Tracks changes in source files and categorizes them according to 
# customizable patterns and categories.
#
# Usage: ./code-historian [options]

# Colors for better readability
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Default settings
HISTORY_DIR=".history"
SOURCE_DIR="src"
OUTPUT_DIR="docs/history"
FILES=""
EXTENSION=""
RECURSIVE=false
PATTERN=""
GENERATE_TIMELINE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            echo "Code Historian - Code Evolution Analysis"
            echo
            echo "Usage: $0 [options]"
            echo
            echo "Options:"
            echo "  -h, --help                Show this help message"
            echo "  --history-dir DIR         Set history directory (default: .history)"
            echo "  --source-dir DIR          Set source directory (default: src)"
            echo "  --output-dir DIR          Set output directory (default: docs/history)"
            echo "  --files FILE1,FILE2,...   Specify files to analyze (without extension)"
            echo "  --ext EXTENSION           File extension to analyze (e.g., py, js, cpp)"
            echo "  --recursive               Recursively search in subdirectories"
            echo "  --pattern PATTERN         File pattern to match (e.g., '*.py', 'test_*.js')"
            echo "  --timeline                Generate visual timeline using Graphviz"
            echo
            echo "Examples:"
            echo "  $0 --files coordinator,sensor --ext py"
            echo "  $0 --recursive --pattern '*.py'"
            echo "  $0 --files app,router --ext js --timeline"
            exit 0
            ;;
        --history-dir)
            HISTORY_DIR="$2"
            shift 2
            ;;
        --source-dir)
            SOURCE_DIR="$2"
            shift 2
            ;;
        --output-dir)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        --files)
            FILES="$2"
            shift 2
            ;;
        --ext)
            EXTENSION="$2"
            shift 2
            ;;
        --recursive)
            RECURSIVE=true
            shift
            ;;
        --pattern)
            PATTERN="$2"
            shift 2
            ;;
        --timeline)
            GENERATE_TIMELINE=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Validate required parameters
if [ -z "$FILES" ] && [ -z "$PATTERN" ]; then
    echo "Error: either --files or --pattern parameter is required"
    exit 1
fi

# Default categories based on common software patterns
CATEGORIES=(
    "Architecture"      # Major structural changes
    "API"              # Interface changes
    "Logic"            # Business logic modifications
    "Data"             # Data structure changes
    "Error Handling"   # Exception and error management
    "Logging"          # Logging and monitoring
    "Documentation"    # Comments and docs
    "Testing"          # Test-related changes
    "Performance"      # Optimization changes
    "Security"         # Security-related updates
    "Refactoring"      # Code restructuring without behavior change
    "Dependencies"     # Package and dependency updates
    "Configuration"    # Config and environment changes
    "UI/UX"           # User interface changes
    "Accessibility"    # A11y improvements
)

# Create output directory
mkdir -p "$OUTPUT_DIR"

# Process each file
if [ -n "$PATTERN" ]; then
    # Use pattern-based search
    if [ "$RECURSIVE" = true ]; then
        history_files=$(find "$HISTORY_DIR" -type f -name "$PATTERN" | sort)
    else
        history_files=$(find "$HISTORY_DIR" -maxdepth 1 -type f -name "$PATTERN" | sort)
    fi
    
    # Extract unique base filenames for analysis
    FILE_ARRAY=()
    while IFS= read -r file; do
        basename=$(basename "$file")
        basename="${basename%.*}"  # Remove extension
        if [[ ! " ${FILE_ARRAY[@]} " =~ " ${basename} " ]]; then
            FILE_ARRAY+=("$basename")
        fi
    done < <(echo "$history_files")
else
    IFS=',' read -ra FILE_ARRAY <<< "$FILES"
    for file in "${FILE_ARRAY[@]}"; do
        echo -e "${BLUE}Analyzing $file${EXTENSION:+.$EXTENSION}...${NC}"
        
        # Find all versions in history
        if [ -n "$EXTENSION" ]; then
            if [ "$RECURSIVE" = true ]; then
                history_files=$(find "$HISTORY_DIR" -type f -name "${file}.${EXTENSION}" | sort)
            else
                history_files=$(find "$HISTORY_DIR" -maxdepth 1 -type f -name "${file}.${EXTENSION}" | sort)
            fi
        else
            if [ "$RECURSIVE" = true ]; then
                history_files=$(find "$HISTORY_DIR" -type f -name "${file}.*" | sort)
            else
                history_files=$(find "$HISTORY_DIR" -maxdepth 1 -type f -name "${file}.*" | sort)
            fi
        fi
        
        # Generate analysis for each file
        OUTPUT_FILE="$OUTPUT_DIR/${file}_changes.md"
        echo "# Code Evolution Analysis for $file${EXTENSION:+.$EXTENSION}" > "$OUTPUT_FILE"
        echo "Generated: $(date)" >> "$OUTPUT_FILE"
        echo >> "$OUTPUT_FILE"
        
        # Process history files
        prev_file=""
        for history_file in $history_files; do
            if [ ! -z "$prev_file" ]; then
                echo "## Changes at $(basename "$(dirname "$history_file")")" >> "$OUTPUT_FILE"
                echo >> "$OUTPUT_FILE"
                
                # Generate diff
                if command -v git >/dev/null 2>&1; then
                    diff_output=$(git diff --no-index --color=always "$prev_file" "$history_file" 2>/dev/null || diff -u "$prev_file" "$history_file")
                else
                    diff_output=$(diff -u "$prev_file" "$history_file")
                fi

                if [ ! -z "$diff_output" ]; then
                    echo '```diff' >> "$OUTPUT_FILE"
                    echo "$diff_output" >> "$OUTPUT_FILE"
                    echo '```' >> "$OUTPUT_FILE"
                    echo >> "$OUTPUT_FILE"
                    
                    # Calculate change statistics
                    added_lines=$(echo "$diff_output" | grep -c '^+')
                    removed_lines=$(echo "$diff_output" | grep -c '^-')
                    echo "### Change Statistics" >> "$OUTPUT_FILE"
                    echo "- Lines added: $added_lines" >> "$OUTPUT_FILE"
                    echo "- Lines removed: $removed_lines" >> "$OUTPUT_FILE"
                    echo "- Net change: $((added_lines - removed_lines))" >> "$OUTPUT_FILE"
                    echo >> "$OUTPUT_FILE"
                    
                    echo "### Change Categories" >> "$OUTPUT_FILE"
                    
                    # Analyze changes for categories
                    for category in "${CATEGORIES[@]}"; do
                        case $category in
                            "Architecture")
                                if grep -qE "class\s+\w+|interface\s+\w+|struct\s+\w+|namespace\s+\w+|module\s+\w+" <<< "$diff_output"; then
                                    echo "- **$category**: Structural changes detected" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "API")
                                if grep -qE "function\s+\w+|def\s+\w+|method\s+\w+|export\s+|public\s+|interface\s+\w+" <<< "$diff_output"; then
                                    echo "- **$category**: API changes detected" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Logic")
                                if grep -qE "\s+if\s+|\s+else\s+|switch\s+|case\s+|for\s+|while\s+|return\s+" <<< "$diff_output"; then
                                    echo "- **$category**: Logic flow modified" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Data")
                                if grep -qE "type\s+\w+|interface\s+\w+|class\s+\w+|struct\s+\w+|enum\s+\w+|const\s+\w+|let\s+\w+|var\s+\w+" <<< "$diff_output"; then
                                    echo "- **$category**: Data structure changes" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Error Handling")
                                if grep -qE "try\s*{|catch\s*\(|throw\s+|error\s+|except:|finally:|raise\s+" <<< "$diff_output"; then
                                    echo "- **$category**: Error handling improved" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Logging")
                                if grep -qE "log\.|debug\.|info\.|warning\.|error\.|console\." <<< "$diff_output"; then
                                    echo "- **$category**: Logging changes detected" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Documentation")
                                if grep -qE "/\*|\*/|//|#|"""|'''|@param|@return|@throws" <<< "$diff_output"; then
                                    echo "- **$category**: Documentation updated" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Testing")
                                if grep -qE "test\s+|assert|expect\.|should\.|mock|describe\s+|it\s+|beforeEach|afterEach" <<< "$diff_output"; then
                                    echo "- **$category**: Test changes detected" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Performance")
                                if grep -qE "cache|optimize|performance|memory|speed|complexity|O\([^)]+\)" <<< "$diff_output"; then
                                    echo "- **$category**: Performance improvements" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Security")
                                if grep -qE "security|auth|crypto|password|token|secret|encrypt|decrypt|hash" <<< "$diff_output"; then
                                    echo "- **$category**: Security updates" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Refactoring")
                                if grep -qE "rename|move|extract|inline|refactor|cleanup|format" <<< "$diff_output"; then
                                    echo "- **$category**: Code refactoring" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Dependencies")
                                if grep -qE "import\s+|require\s+|from\s+|package|dependency|version" <<< "$diff_output"; then
                                    echo "- **$category**: Dependency changes" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Configuration")
                                if grep -qE "config|env|environment|setting|option|flag|feature" <<< "$diff_output"; then
                                    echo "- **$category**: Configuration changes" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "UI/UX")
                                if grep -qE "style|css|html|template|component|view|layout|design" <<< "$diff_output"; then
                                    echo "- **$category**: UI/UX changes" >> "$OUTPUT_FILE"
                                fi
                                ;;
                            "Accessibility")
                                if grep -qE "aria-|role=|alt=|tabindex|accessibility|a11y" <<< "$diff_output"; then
                                    echo "- **$category**: Accessibility improvements" >> "$OUTPUT_FILE"
                                fi
                                ;;
                        esac
                    done
                    echo >> "$OUTPUT_FILE"
                fi
            fi
            prev_file="$history_file"
        done
    done
fi

# Generate summary
SUMMARY_FILE="$OUTPUT_DIR/SUMMARY.md"
echo "# Code Evolution Summary" > "$SUMMARY_FILE"
echo "Generated: $(date)" >> "$SUMMARY_FILE"
echo >> "$SUMMARY_FILE"

echo "## Analyzed Files" >> "$SUMMARY_FILE"
for file in "${FILE_ARRAY[@]}"; do
    echo "- [${file}${EXTENSION:+.$EXTENSION}](${file}_changes.md)" >> "$SUMMARY_FILE"
done

# Generate visual timelines if requested
if [ "$GENERATE_TIMELINE" = true ]; then
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}Error: Python 3 is required for timeline generation${NC}"
        exit 1
    fi
    
    # Check for graphviz package
    if ! python3 -c "import graphviz" &> /dev/null; then
        echo -e "${RED}Error: Python graphviz package is required. Install it with: pip install graphviz${NC}"
        exit 1
    fi
    
    # Generate timelines
    echo -e "${BLUE}Generating visual timelines...${NC}"
    python3 timeline_generator.py "$OUTPUT_DIR"
    
    # Add timeline section to summary
    echo >> "$SUMMARY_FILE"
    echo "## Visual Timelines" >> "$SUMMARY_FILE"
    for file in "${FILE_ARRAY[@]}"; do
        timeline_file="${file}_timeline.png"
        if [ -f "$OUTPUT_DIR/$timeline_file" ]; then
            echo "- [${file}${EXTENSION:+.$EXTENSION} Timeline]($timeline_file)" >> "$SUMMARY_FILE"
        fi
    done
fi

echo -e "${GREEN}Analysis complete! Results saved in $OUTPUT_DIR${NC}" 